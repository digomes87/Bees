version: '3.8'

# Docker Compose configuration for Bee Migration Analysis Project
# This file defines multiple services for different use cases

services:
  # Main application service
  app:
    build:
      context: .
      target: production
    container_name: bee-migration-app
    volumes:
      - ./data:/app/data:ro
      - ./results:/app/results
      - ./images:/app/images
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
    networks:
      - bee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service
  dev:
    build:
      context: .
      target: development
    container_name: bee-migration-dev
    volumes:
      - .:/app
      - /app/.git
      - dev-cache:/app/.pytest_cache
      - dev-cache:/app/.mypy_cache
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=DEBUG
    networks:
      - bee-network
    stdin_open: true
    tty: true
    command: bash

  # Jupyter notebook service
  jupyter:
    build:
      context: .
      target: jupyter
    container_name: bee-migration-jupyter
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - jupyter-data:/home/beeuser/.jupyter
    environment:
      - PYTHONPATH=/app/src
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - bee-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`jupyter.localhost`)"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"

  # API service
  api:
    build:
      context: .
      target: api
    container_name: bee-migration-api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data:ro
      - ./results:/app/results
      - ./images:/app/images
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app/src
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    networks:
      - bee-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # Dashboard service
  dashboard:
    build:
      context: .
      target: dashboard
    container_name: bee-migration-dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data:ro
      - ./results:/app/results:ro
      - ./images:/app/images:ro
    environment:
      - PYTHONPATH=/app/src
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_PORT=8501
    networks:
      - bee-network
    restart: unless-stopped
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8501"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: bee-migration-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - bee-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (for future use)
  postgres:
    image: postgres:15-alpine
    container_name: bee-migration-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=bee_migration
      - POSTGRES_USER=beeuser
      - POSTGRES_PASSWORD=beepassword
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - bee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U beeuser -d bee_migration"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Testing service
  test:
    build:
      context: .
      target: testing
    container_name: bee-migration-test
    volumes:
      - .:/app
      - test-cache:/app/.pytest_cache
      - test-coverage:/app/htmlcov
    environment:
      - PYTHONPATH=/app/src
      - PYTEST_CURRENT_TEST=1
    networks:
      - bee-network
    profiles:
      - testing

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bee-migration-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - bee-network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bee-migration-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - bee-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Reverse proxy with Traefik (optional)
  traefik:
    image: traefik:v3.0
    container_name: bee-migration-traefik
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
    networks:
      - bee-network
    restart: unless-stopped
    profiles:
      - proxy
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80

networks:
  bee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Persistent data volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # Development volumes
  dev-cache:
    driver: local
  test-cache:
    driver: local
  test-coverage:
    driver: local
  jupyter-data:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
# This file can be created for local development overrides